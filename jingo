#!/usr/bin/env node

/*
 * Jingo, wiki engine
 * http://github.com/claudioc/jingo
 *
 * Copyright 2015 Claudio Cicali <claudio.cicali@gmail.com>
 * Released under the MIT license
 */
var program           = require('commander'),
    tools             = require('./lib/tools'),
    config            = require('./lib/config'),
    http              = require('http'),
    fs                = require('fs'),
    os                = require('os'),
    semver            = require('semver'),
    https             = require('https');

global.Git = require('./lib/gitmech');

program.version('1.3.0')
       .option('-c, --config <path>', 'Specify the config file')
       .option('-#, --hash-string <string>', 'Create an hash for a string')
       .option('-l, --local', 'Listen on localhost only')
       .option('-s, --sample-config', 'Dumps a config file template and exits')
       .option('-h, --https-config', 'Provide the config file to enable HTTPS support') 
       .parse(process.argv);

if (program.sampleConfig) {
  console.log(config.sample());
  process.exit(0);
}

if (program.hashString) {
  console.log(tools.hashify(program.hashString));
  process.exit(0);
}

if (!program.config || !fs.existsSync(program.config)) {
  program.help();
  process.exit(-1);
}

if (!config.load(program.config)) {
  console.log("Error: " + config.getError());
  process.exit(-1);
}

if (!config.validate()) {
  console.log("Error: " + config.getError());
  process.exit(-1);
}

var refspec = config.get("application").remote.split(/\s+/);

Git.setup(config.get("application").git,
          config.get("application").repository,
          config.get("application").docSubdir,
          refspec, function(err, version) {

  if (err) {
    console.log(err);
    process.exit(-1);
  }

  if (os.platform() == "darwin" &&
      !config.get("application").skipGitCheck &&
      config.get("pages").title.fromFilename && 
      !semver.satisfies(version, ">=1.8.5")) {
    console.log("Your current setup uses the filename of the wiki page as the page title.");
    console.log("Unfortunately this version of git (" + version + ".x) on OSX doesn't handle");
    console.log("very well non ASCII characters used in filenames, therefore I rather not start.");
    console.log("You can continue anyway, setting `application.skipGitCheck` to true in the");
    console.log("config file but you should better upgrade your git. Thank you.");
    process.exit(-1);
  }

  start();
});

function start() {

  var app = require("./lib/app").initialize(config);

  var listenAddr = process.env.NW_ADDR || "";
  var server =config.get("server");
  if (server.localOnly) {
    listenAddr = "localhost";
  }

  if(server.https){
      var httpsError = false;

      try{
          var httpsOptions = {
              key : fs.readFileSync(server.httpsKeyFilePath),
              cert: fs.readFileSync(server.httpsCertFilePath)
          };
      }catch(err){
          httpsError = true;
          console.log("An error occured while reading the HTTPS key or certificate provided.");
          console.log("HTTPS Server won't start");
      }

      if(!httpsError){
          https.createServer(httpsOptions, app).listen(server.httpsPort, function() {
              console.log((new Date()) + " - Jingo%sHTTPS server v%s listening on port %s", server.localOnly ? " (local) " : " ", program.version(), server.httpsPort);
          });
      }
  }

  var httpServerHandler,
      httpServerDisabled = !(server.https && server.forceHttps);     // Verify settings to know if should disable HTTP server

  if(httpServerDisabled) {       // If option to disable HTTP is True, change the httpServerHandler
      httpServerHandler = function(req,res) {
          res.statusCode = 501;     // HTTP Not Implemented
          res.send("test");
          //res.json({"Error":"HTTP protocol is not supported. Must use HTTPS to connect."});
      };
  }

  http.createServer(httpServerHandler ? httpServerHandler : app).listen(server.port, listenAddr, function() {
      if(httpServerDisabled) {
          console.log((new Date()) + " - Jingo%sHTTP server v%s restricted access mode. Listening on port %s", server.localOnly ? " (local) " : " ", program.version(), server.port);
      }else{
          console.log((new Date()) + " - Jingo%sHTTP server v%s listening on port %s", server.localOnly ? " (local) " : " ", program.version(), server.port);
      }
  });
  
  if (config.get("application").pushInterval && refspec.length > 0) {
    setInterval(function() {
      Git.pull(function(err) {
        if (err) {
          console.log("Error: " + err);
        } else {
          Git.push(function(err) {
            if (err) {
              console.log("Error: " + err);
            }
          });
        }
      });
    }, config.get("application").pushInterval * 1000);
  }
}
